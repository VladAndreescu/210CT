/*
FUNCTION binarysearch(integer left, integer right)

    found <- "False"
    IF left > right THEN
        RETURN "False"
    ELSE
        mid <- (left+right) / 2
        IF arrayy[mid] >= low and arrayy[mid] <= high THEN
            found <- "True"
        ELSE IF arrayy[mid] > low THEN
            RETURN binarysearch(left, mid-1)
        ELSE
            RETURN binarysearch(mid+1, right)

    RETURN found


*/
// COMPLEXITY IS :worst case performance: O(log(n)), best case performance O(1), average case performance O(log(n))

#include<iostream>
using namespace std;
int n,arrayy[100],mid, low,high;
string found;

string binarysearch (int left, int right)
{
    found = "False";
    if(left > right)
        return "False";
    else
    {

        mid = (left + right) /2;
        if (arrayy[mid] >= low && arrayy[mid] <= high  )
            found = "True";
        else if (arrayy[mid] > low)
            return binarysearch (left , mid-1);
        else
            return binarysearch (mid+1 , right);
    }
    return found;
}


int main()
{
    cout << "How many numbers do you want in the array: ";
    cin >> n;
    cout << endl;
    cout << "Give " << n << " elements in ascending order";
    for (int i = 1; i <= n; i++)
    cin >> arrayy[i];
    cout << endl;
    cout << "Type the range you want to find: ";
    cin >> low;
    cin >> high;


    cout << binarysearch (0 , n);

    return 0;
}
