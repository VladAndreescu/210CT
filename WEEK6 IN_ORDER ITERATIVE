#include <iostream>
#include <stack>
using namespace std;
class BinTreeNode
{
public:
    BinTreeNode(int value)
    {
        this->value=value;
        this->left=NULL;
        this->right=NULL;
    }
    int value;
    BinTreeNode* left;
    BinTreeNode* right;

};

BinTreeNode* tree_insert(BinTreeNode* tree, int item)
{
    if(tree==NULL)
        tree=new BinTreeNode(item);
    else if(item < tree->value)
        if(tree->left==NULL)
            tree->left=new BinTreeNode(item);
        else
            tree_insert(tree->left,item);
    else if(tree->right==NULL)
        tree->right=new BinTreeNode(item);
    else
        tree_insert(tree->right,item);
    return tree;

}

void postorder(BinTreeNode* tree)
{
    if(tree->left!=NULL)
        postorder(tree->left);
    if(tree->right!=NULL)
        postorder(tree->right);
    cout << tree->value <<endl;

}

void in_order(BinTreeNode* tree)
{
    if(tree->left!=NULL)
        in_order(tree->left);
    cout << tree->value <<endl;
    if(tree->right!=NULL)
        in_order(tree->right);
}




void in_orderiterative(BinTreeNode* tree)
{
    stack<BinTreeNode*> s;
    BinTreeNode* current = tree;
    bool condition = true;
    while(condition != false)
    {
        if(current!=NULL) // add in stack every node on the left part

        {
            s.push(current);
            current=current->left;
        }
        else if(s.size() > 0)
        {
            current=s.top();s.pop();
            cout<<current->value<<endl;
            current=current->right;// if there are no more nodes o the left part we will move to the right part
        }
        else
            condition=false;
    }
}

int main(int argc, char *argv[])
{
    BinTreeNode* t=tree_insert(0,6);
    tree_insert(t,10);
    tree_insert(t,5);
    tree_insert(t,2);
    tree_insert(t,3);
    tree_insert(t,4);
    tree_insert(t,11);
    in_orderiterative(t);
    return 0;
}
